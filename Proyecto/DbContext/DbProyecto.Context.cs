//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Proyecto.DbContext
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProyectoEntities : DbContext
    {
        public ProyectoEntities()
            : base("name=ProyectoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<SPClientesListar_Result> SPClientesListar()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPClientesListar_Result>("SPClientesListar");
        }
    
        public virtual int SPClienteAgregar(string nombre, string apellido, string cedula, string telefono, string correoelectronico, Nullable<int> tipoclienteid)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correoelectronicoParameter = correoelectronico != null ?
                new ObjectParameter("correoelectronico", correoelectronico) :
                new ObjectParameter("correoelectronico", typeof(string));
    
            var tipoclienteidParameter = tipoclienteid.HasValue ?
                new ObjectParameter("tipoclienteid", tipoclienteid) :
                new ObjectParameter("tipoclienteid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPClienteAgregar", nombreParameter, apellidoParameter, cedulaParameter, telefonoParameter, correoelectronicoParameter, tipoclienteidParameter);
        }
    
        public virtual ObjectResult<SPClienteTipo_Result> SPClienteTipo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPClienteTipo_Result>("SPClienteTipo");
        }
    
        public virtual ObjectResult<SPEmpleadosListar_Result> SPEmpleadosListar()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPEmpleadosListar_Result>("SPEmpleadosListar");
        }
    
        public virtual int SPClienteEliminar(Nullable<int> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPClienteEliminar", idClienteParameter);
        }
    
        public virtual int SPClienteModificar(Nullable<int> clienteid, string nombre, string apellido, string cedula, string telefono, string correoelectronico, Nullable<int> tipoclienteid)
        {
            var clienteidParameter = clienteid.HasValue ?
                new ObjectParameter("clienteid", clienteid) :
                new ObjectParameter("clienteid", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correoelectronicoParameter = correoelectronico != null ?
                new ObjectParameter("correoelectronico", correoelectronico) :
                new ObjectParameter("correoelectronico", typeof(string));
    
            var tipoclienteidParameter = tipoclienteid.HasValue ?
                new ObjectParameter("tipoclienteid", tipoclienteid) :
                new ObjectParameter("tipoclienteid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPClienteModificar", clienteidParameter, nombreParameter, apellidoParameter, cedulaParameter, telefonoParameter, correoelectronicoParameter, tipoclienteidParameter);
        }
    
        public virtual ObjectResult<SPClienteConsultarPorID_Result> SPClienteConsultarPorID(Nullable<int> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPClienteConsultarPorID_Result>("SPClienteConsultarPorID", idClienteParameter);
        }
    
        public virtual int SPEmpleadoAgregar(string nombre, string apellido, string cedula, string telefono, string correo, Nullable<int> departamentoid, Nullable<int> jerarquiaid)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var departamentoidParameter = departamentoid.HasValue ?
                new ObjectParameter("departamentoid", departamentoid) :
                new ObjectParameter("departamentoid", typeof(int));
    
            var jerarquiaidParameter = jerarquiaid.HasValue ?
                new ObjectParameter("jerarquiaid", jerarquiaid) :
                new ObjectParameter("jerarquiaid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPEmpleadoAgregar", nombreParameter, apellidoParameter, cedulaParameter, telefonoParameter, correoParameter, departamentoidParameter, jerarquiaidParameter);
        }
    
        public virtual ObjectResult<SPEmpleadoConsultarPorID_Result> SPEmpleadoConsultarPorID(Nullable<int> idEmpleado)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("idEmpleado", idEmpleado) :
                new ObjectParameter("idEmpleado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPEmpleadoConsultarPorID_Result>("SPEmpleadoConsultarPorID", idEmpleadoParameter);
        }
    
        public virtual ObjectResult<SPEmpleadoDepartamento_Result> SPEmpleadoDepartamento()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPEmpleadoDepartamento_Result>("SPEmpleadoDepartamento");
        }
    
        public virtual int SPEmpleadoEliminar(Nullable<int> idEmpleado)
        {
            var idEmpleadoParameter = idEmpleado.HasValue ?
                new ObjectParameter("idEmpleado", idEmpleado) :
                new ObjectParameter("idEmpleado", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPEmpleadoEliminar", idEmpleadoParameter);
        }
    
        public virtual ObjectResult<SPEmpleadoJerarquia_Result> SPEmpleadoJerarquia()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SPEmpleadoJerarquia_Result>("SPEmpleadoJerarquia");
        }
    
        public virtual int SPEmpleadoModificar(Nullable<int> empleadoid, string nombre, string apellido, string cedula, string telefono, string correo, Nullable<int> departamentoid, Nullable<int> jerarquiaid)
        {
            var empleadoidParameter = empleadoid.HasValue ?
                new ObjectParameter("Empleadoid", empleadoid) :
                new ObjectParameter("Empleadoid", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoParameter = apellido != null ?
                new ObjectParameter("apellido", apellido) :
                new ObjectParameter("apellido", typeof(string));
    
            var cedulaParameter = cedula != null ?
                new ObjectParameter("cedula", cedula) :
                new ObjectParameter("cedula", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correoParameter = correo != null ?
                new ObjectParameter("correo", correo) :
                new ObjectParameter("correo", typeof(string));
    
            var departamentoidParameter = departamentoid.HasValue ?
                new ObjectParameter("departamentoid", departamentoid) :
                new ObjectParameter("departamentoid", typeof(int));
    
            var jerarquiaidParameter = jerarquiaid.HasValue ?
                new ObjectParameter("jerarquiaid", jerarquiaid) :
                new ObjectParameter("jerarquiaid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPEmpleadoModificar", empleadoidParameter, nombreParameter, apellidoParameter, cedulaParameter, telefonoParameter, correoParameter, departamentoidParameter, jerarquiaidParameter);
        }
    
        public virtual int SPUsuarioAgregar(string usuario, string contrasennia)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var contrasenniaParameter = contrasennia != null ?
                new ObjectParameter("contrasennia", contrasennia) :
                new ObjectParameter("contrasennia", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPUsuarioAgregar", usuarioParameter, contrasenniaParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SPUsuarioValidar(string usuario, string contrasennia)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var contrasenniaParameter = contrasennia != null ?
                new ObjectParameter("contrasennia", contrasennia) :
                new ObjectParameter("contrasennia", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SPUsuarioValidar", usuarioParameter, contrasenniaParameter);
        }
    }
}
